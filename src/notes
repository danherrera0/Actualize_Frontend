{/*// <DragDropContext
//   onDragEnd={this.onDragEnd}
//   onDragStart={this.onDragStart}
//   onDragUpdate={this.onDragUpdate}
// >
//   <Container>
//     {this.state.columnOrder.map((columnId, index) => {
//       const column = this.state.columns[columnId];
//       console.log(column);
//
//       // const tasks = [];
//       // let columnTasks = tasks.filter(task => {
//       //   return task.column_id === `column-${task.column_id}`;
//       // });
//       // let columnTaskIds = column.task_ids;
//       // let columnTasks = columnTaskIds.map(task => {
//       //   return `task-${task.id}`;
//       // });
//       // console.log(columnTasks);
//
//       // column.task_ids.forEach(taskId => {
//       //   if (this.state.tasks[taskId])
//       //     return tasks.push(this.state.tasks[taskId]);
//       // });
//
//       // if (tasks.length > 0)
//       //   return (
//       //     <Column
//       //       key={column.id}
//       //       column={column}
//       //       // tasks={tasks.length > 0 ? columnTasks : null}
//       //     />
//       //   );
//     })}
//   </Container>
// </DragDropContext>
*/}


render() {
  console.log(this.state.columns);
  if (this.state.columns) {
    let columns = this.state.columnOrder.map((columnId, index) => {
      const column = this.state.columns[columnId];
      return column;
    });
    console.log(columns);
    // if (columns.length > 0) {
    //   let columnTaskIds = columns.map(column => {
    //     console.log(column);
    //     return column.task_ids;
    //   });

    /*//   console.log(columnTaskIds);
    // }
    //   let allTasks = this.state.tasks;
    //   let filteredTasks = Object.values(allTasks);
    //   // let columnTasks = filteredTasks.filter(task => {
    //   //   return task.column_id === column.id;
    //   // });
    //   console.log(filteredTasks);
    //   // const tasks = [];
    // });
    // let myColumns = Object.values(this.state.columns);
    // console.log(myColumns);

    // let columnTaskIds = columns
    //   .map(column => {
    //     return column.task_ids;
    //   })
    //   .flat();
    // console.log(columnTaskIds);
    // let columnTasks = columnTaskIds.map(task => {
    //   return `task-${task.id}`;
    // });
    // console.log(columnTasks);
  */
  }


  {
    "column-1": {
      id: "column-1",
      title: "To do",
      task_ids: ["task-1"]
    },
    "column-2": {
      id: "column-2",
      title: "In Progress",
      task_ids: ["task-2"]
    },
    "column-3": {
      id: "column-3",
      title: "Done",
      task_ids: ["task-3"]
    }

    7:20PM

    import React from "react";
    import ReactDOM from "react-dom";
    import { DragDropContext } from "react-beautiful-dnd";
    import Column from "./column";
    import NavBar from "./NavBar";
    import styled from "styled-components";

    const Container = styled.div`
      display: flex;
    `;

    class App extends React.Component {
      state = {
        tasks: [],
        columns: {
          "column-1": {
            id: "column-1",
            title: "To do",
            task_ids: ["task-1"]
          },
          "column-2": {
            id: "column-2",
            title: "In Progress",
            task_ids: ["task-2"]
          },
          "column-3": {
            id: "column-3",
            title: "Done",
            task_ids: ["task-3"]
            // task_ids are used to indicate ownership and maintain order in the lists
          }
        },
        columnOrder: ["column-1", "column-2", "column-3"],
        col1Tasks: [],
        col2Tasks: [],
        col3Tasks: []
      };

      fetchColumns = () => {
        fetch("http://localhost:3000/api/v1/columns")
          .then(r => r.json())
          .then(apiColumns => {
            let myColumns = apiColumns.reduce((final, elem) => {
              return Object.assign(final, elem);
            }, {});

            let col1 = myColumns["column-1"].task_ids;
            let col2 = myColumns["column-2"].task_ids;
            let col3 = myColumns["column-3"].task_ids;

            let col1Tasks = col1.map(task => `task-${task.id}`);
            let col2Tasks = col2.map(task => `task-${task.id}`);
            let col3Tasks = col3.map(task => `task-${task.id}`);

            this.setState({
              columns: myColumns,
              col1Tasks: col1Tasks,
              col2Tasks: col2Tasks,
              col3Tasks: col3Tasks
            });
            // this.setState({
            //   columns: {
            //     "column-1": {
            //       task_ids: col1Tasks
            //     }
            //   }
            // });
            //end of second fetch;
          });
      };

      updateTaskIds = () => {
        this.setState({
          columns: {
            "column-1": {
              id: this.state.id,
              title: this.state.title,
              task_ids: this.state.col1Tasks
            },
            "column-2": {
              id: this.state.id,
              title: this.state.title,
              task_ids: this.state.col2Tasks
            },
            "column-3": {
              id: this.state.id,
              title: this.state.title,
              task_ids: this.state.col3Tasks
            }
          }
        });
      };

      componentDidMount() {
        fetch("http://localhost:3000/api/v1/tasks")
          .then(r => r.json())
          .then(tasks => {
            let myTasks = tasks.reduce((final, elem) => {
              return Object.assign(final, elem);
            }, {});
            this.setState(
              {
                tasks: myTasks
              },
              () => this.fetchColumns()
            );
          });
      }

      onDragStart = () => {
        const homeIndex = start =>
          this.state.columnOrder.indexOf(start.source.droppableId);
        this.setState({
          homeIndex
        });
      };

      onDragUpdate = update => {
        const { destination } = update;
        const opacity = destination
          ? destination.index / Object.keys(this.state.tasks).length
          : 0;
        document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;
      };

      onDragEnd = result => {
        this.setState({
          homeIndex: null
        });
        document.body.style.color = "inherit";
        const { destination, source, draggableId } = result;
        if (!destination) {
          return;
        }
        if (
          destination.droppableId === source.droppableId &&
          destination.index === source.index
        ) {
          return;
        }
        const start = this.state.columns[source.droppableId];
        const finish = this.state.columns[destination.droppableId];

        if (start === finish) {
          const newtask_ids = Array.from(start.task_ids);
          newtask_ids.splice(source.index, 1);
          newtask_ids.splice(destination.index, 0, draggableId);

          const newColumn = {
            ...start,
            task_ids: newtask_ids
          };
          const newState = {
            ...this.state,
            columns: {
              ...this.state.columns,
              [newColumn.id]: newColumn
            }
          };
          this.setState(newState);
          return;
        }
        const starttask_ids = Array.from(start.task_ids);
        starttask_ids.splice(source.index, 1);
        const newStart = {
          ...start,
          task_ids: starttask_ids
        };
        const finishtask_ids = Array.from(finish.task_ids);
        finishtask_ids.splice(destination.index, 0, draggableId);
        const newFinish = {
          ...finish,
          task_ids: finishtask_ids
        };
        const newState = {
          ...this.state,
          columns: {
            ...this.state.columns,
            [newStart.id]: newStart,
            [newFinish.id]: newFinish
          }
        };
        this.setState(newState);
      };

      render() {
        console.log(this.state);
        return (
          <DragDropContext
            onDragEnd={this.onDragEnd}
            onDragStart={this.onDragStart}
            onDragUpdate={this.onDragUpdate}
          >
            <NavBar />
            <Container>
              {this.updateTaskIds()}
              {this.state.columnOrder.map((columnId, index) => {
                const column = this.state.columns[columnId];
                const tasks = [];
                column.task_ids.forEach(taskId => {
                  if (this.state.tasks[taskId])
                    return tasks.push(this.state.tasks[taskId]);
                });
                return <Column key={column.id} column={column} tasks={tasks} />;
              })}
            </Container>
          </DragDropContext>
        );
      }
    }

    ReactDOM.render(<App />, document.getElementById("root"));
